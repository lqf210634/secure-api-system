version: '3.8'

services:
  # Database for testing
  postgres-test:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: testdb
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: testpassword
    ports:
      - "5432:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U testuser -d testdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for testing
  redis-test:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend service for testing
  backend-test:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: test
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-test:5432/testdb
      SPRING_DATASOURCE_USERNAME: testuser
      SPRING_DATASOURCE_PASSWORD: testpassword
      SPRING_REDIS_HOST: redis-test
      SPRING_REDIS_PORT: 6379
      JWT_SECRET: test-secret-key-for-ci-cd-pipeline
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend service for testing
  frontend-test:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    environment:
      NODE_ENV: test
      REACT_APP_API_URL: http://backend-test:8080/api
    depends_on:
      backend-test:
        condition: service_healthy
    ports:
      - "3000:80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Test runner service
  test-runner:
    build:
      context: ./tests
      dockerfile: Dockerfile
    environment:
      BACKEND_URL: http://backend-test:8080
      FRONTEND_URL: http://frontend-test:80
    depends_on:
      backend-test:
        condition: service_healthy
      frontend-test:
        condition: service_healthy
    volumes:
      - ./tests/results:/app/results
    command: ["npm", "run", "test:ci"]

volumes:
  postgres_test_data: