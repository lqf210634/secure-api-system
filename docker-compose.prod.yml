version: '3.8'

services:
  # 前端应用
  frontend:
    image: your-dockerhub-username/secure-api-frontend:${IMAGE_TAG:-latest}
    container_name: secure-api-frontend-prod
    restart: always
    environment:
      API_BASE_URL: ${API_BASE_URL:-https://api.yourdomain.com}
      APP_TITLE: ${APP_TITLE:-Secure API System}
      APP_VERSION: ${APP_VERSION:-1.0.0}
      NODE_ENV: production
      BACKEND_HOST: ${BACKEND_HOST:-backend:8080}
      ENABLE_ANALYTICS: ${ENABLE_ANALYTICS:-true}
      DEBUG_MODE: false
    ports:
      - "80:80"
    volumes:
      - frontend_logs:/var/log/nginx
    networks:
      - secure-api-network
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      timeout: 3s
      retries: 3
      interval: 30s
      start_period: 10s

  # 后端应用
  backend:
    image: your-dockerhub-username/secure-api-backend:${IMAGE_TAG:-latest}
    container_name: secure-api-backend-prod
    restart: always
    environment:
      SPRING_PROFILES_ACTIVE: production
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT:-3306}
      DB_NAME: ${DB_NAME}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      LOG_LEVEL: WARN
      ENABLE_DEBUG: false
      ENABLE_JMX: true
      # 生产环境特定配置
      SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE: 20
      SPRING_DATASOURCE_HIKARI_MINIMUM_IDLE: 5
      SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT: 30000
      SPRING_DATASOURCE_HIKARI_IDLE_TIMEOUT: 600000
      SPRING_DATASOURCE_HIKARI_MAX_LIFETIME: 1800000
      # JVM优化
      JAVA_OPTS: >-
        -Xms1g -Xmx2g
        -XX:+UseG1GC
        -XX:G1HeapRegionSize=16m
        -XX:+UseStringDeduplication
        -XX:+OptimizeStringConcat
        -XX:+UseCompressedOops
        -XX:+UseCompressedClassPointers
        -Djava.security.egd=file:/dev/./urandom
        -Dspring.backgroundpreinitializer.ignore=true
    ports:
      - "8080:8080"
      - "9999:9999"  # JMX
    volumes:
      - backend_logs:/app/logs
      - backend_uploads:/app/uploads
    networks:
      - secure-api-network
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2'
          memory: 3G
        reservations:
          cpus: '1'
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      timeout: 10s
      retries: 5
      interval: 30s
      start_period: 120s

  # Nginx负载均衡器
  nginx:
    image: nginx:1.25-alpine
    container_name: secure-api-nginx-prod
    restart: always
    depends_on:
      - frontend
      - backend
    ports:
      - "443:443"
      - "8080:80"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - secure-api-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      timeout: 3s
      retries: 3
      interval: 30s

  # 监控 - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: secure-api-prometheus-prod
    restart: always
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus:ro
      - prometheus_data:/prometheus
    networks:
      - secure-api-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # 监控 - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: secure-api-grafana-prod
    restart: always
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SECURITY_ALLOW_EMBEDDING: true
      GF_AUTH_ANONYMOUS_ENABLED: false
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - secure-api-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # 日志收集 - Filebeat
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.8.0
    container_name: secure-api-filebeat-prod
    restart: always
    user: root
    volumes:
      - ./logging/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - backend_logs:/app/logs:ro
      - frontend_logs:/var/log/nginx:ro
      - nginx_logs:/var/log/nginx-lb:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - ELASTICSEARCH_HOST=${ELASTICSEARCH_HOST:-elasticsearch.yourdomain.com}
      - ELASTICSEARCH_PORT=${ELASTICSEARCH_PORT:-9200}
      - ELASTICSEARCH_USERNAME=${ELASTICSEARCH_USERNAME}
      - ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_PASSWORD}
    networks:
      - secure-api-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  # 备份服务
  backup:
    image: alpine:latest
    container_name: secure-api-backup-prod
    restart: "no"
    volumes:
      - backend_logs:/backup/logs:ro
      - backend_uploads:/backup/uploads:ro
      - ./scripts/backup.sh:/backup.sh:ro
    environment:
      - BACKUP_S3_BUCKET=${BACKUP_S3_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-us-east-1}
    networks:
      - secure-api-network
    profiles:
      - backup
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M

# 网络配置
networks:
  secure-api-network:
    driver: overlay
    attachable: true
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 数据卷
volumes:
  backend_logs:
    driver: local
  backend_uploads:
    driver: local
  frontend_logs:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local