version: '3.8'

services:
  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: secure-api-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-rootpassword}
      MYSQL_DATABASE: ${DB_NAME:-secure_api}
      MYSQL_USER: ${DB_USERNAME:-apiuser}
      MYSQL_PASSWORD: ${DB_PASSWORD:-apipassword}
      MYSQL_CHARACTER_SET_SERVER: utf8mb4
      MYSQL_COLLATION_SERVER: utf8mb4_unicode_ci
    ports:
      - "${DB_PORT:-3306}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/init:/docker-entrypoint-initdb.d:ro
      - ./database/conf:/etc/mysql/conf.d:ro
    networks:
      - secure-api-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
      interval: 10s
      start_period: 40s

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: secure-api-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redispassword}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - secure-api-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      timeout: 3s
      retries: 5
      interval: 10s

  # 后端应用
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: secure-api-backend
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_HOST: mysql
      DB_PORT: 3306
      DB_NAME: ${DB_NAME:-secure_api}
      DB_USERNAME: ${DB_USERNAME:-apiuser}
      DB_PASSWORD: ${DB_PASSWORD:-apipassword}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redispassword}
      JWT_SECRET: ${JWT_SECRET:-your-jwt-secret-key-here}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-your-encryption-key-here}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      ENABLE_DEBUG: ${ENABLE_DEBUG:-false}
      ENABLE_JMX: ${ENABLE_JMX:-false}
    ports:
      - "${BACKEND_PORT:-8080}:8080"
      - "${DEBUG_PORT:-5005}:5005"  # Debug port
      - "${JMX_PORT:-9999}:9999"    # JMX port
    volumes:
      - backend_logs:/app/logs
      - backend_uploads:/app/uploads
      - backend_temp:/app/temp
    networks:
      - secure-api-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      timeout: 10s
      retries: 5
      interval: 30s
      start_period: 60s

  # 前端应用
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: secure-api-frontend
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    environment:
      API_BASE_URL: ${API_BASE_URL:-/api}
      APP_TITLE: ${APP_TITLE:-Secure API System}
      APP_VERSION: ${APP_VERSION:-1.0.0}
      NODE_ENV: ${NODE_ENV:-production}
      BACKEND_HOST: backend:8080
      ENABLE_ANALYTICS: ${ENABLE_ANALYTICS:-false}
      DEBUG_MODE: ${DEBUG_MODE:-false}
    ports:
      - "${FRONTEND_PORT:-80}:80"
    volumes:
      - frontend_logs:/var/log/nginx
    networks:
      - secure-api-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      timeout: 3s
      retries: 3
      interval: 30s

  # Nginx反向代理（可选）
  nginx:
    image: nginx:1.25-alpine
    container_name: secure-api-nginx
    restart: unless-stopped
    depends_on:
      - frontend
      - backend
    ports:
      - "${NGINX_PORT:-443}:443"
      - "${NGINX_HTTP_PORT:-8080}:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - secure-api-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      timeout: 3s
      retries: 3
      interval: 30s

  # 监控 - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: secure-api-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus:ro
      - prometheus_data:/prometheus
    networks:
      - secure-api-network
    profiles:
      - monitoring

  # 监控 - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: secure-api-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - secure-api-network
    profiles:
      - monitoring

  # 日志收集 - ELK Stack (可选)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: secure-api-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - secure-api-network
    profiles:
      - logging

  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: secure-api-logstash
    restart: unless-stopped
    depends_on:
      - elasticsearch
    volumes:
      - ./logging/logstash/config:/usr/share/logstash/config:ro
      - ./logging/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - backend_logs:/app/logs:ro
      - frontend_logs:/var/log/nginx:ro
    networks:
      - secure-api-network
    profiles:
      - logging

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: secure-api-kibana
    restart: unless-stopped
    depends_on:
      - elasticsearch
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "${KIBANA_PORT:-5601}:5601"
    networks:
      - secure-api-network
    profiles:
      - logging

# 网络配置
networks:
  secure-api-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 数据卷
volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  backend_uploads:
    driver: local
  backend_temp:
    driver: local
  frontend_logs:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local